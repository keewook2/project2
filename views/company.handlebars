{{!-- <nav class="navbar navbar-dark bg-dark">
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarToggleExternalContent" aria-controls="navbarToggleExternalContent" aria-expanded="false" aria-label="Toggle navigation">DON'T PRESS
      <span class="navbar-toggler-icon"></span>
    </button>
  </nav> --}}

<nav class="navbar navbar-dark bg-dark">
	{{#each company}}
	{{company.symbol}}
	{{company.companyName}}
	{{/each}}
</nav>

<div class="wrapper">
	<div class="container">
		<div class="row">
			<div class="card col-4" id="overview">
				<div class="card-title">
					Company Profile
				</div>
				<br>
				<hr>
				<br>
				<div class="card-body">
					<img src="{{company.image}}"><br>
					Name: {{company.companyName}}<br>
					Ticker: {{company.symbol}}<br>
					Listed Exhange: {{company.exchange}}<br>
					Market Cap: {{company.mktCap}}<br>
					Industry: {{company.industry}}<br>
					Sector: {{company.sector}}<br>
					CEO: {{company.ceo}}<br>
					Business Overview: {{company.description}}<br>
				</div>
			</div>

			<div class="card col-8" id="metrics">
				<div class="card-title">
					Key Metrics
				</div>
				<br>
				<hr>
				<br>
				<div class="card-body">
					<div class="metrics-fin-stats">
						<thead>
							{{#each company}}
							<th>{{company.date}}</th>
							{{/each}}
						</thead>
						<tbody>
							{{#each company}}
							<tr>
								<td>{{company.Revenue}}</td>
								<td>{{company.Revenue Growth}}</td>
								<td>{{company.Cost of Revenue}}</td>
								<td>{{company.Gross Profit}}</td>
								<td>{{company.Operating Expenses}}</td>
								<td>{{company.Operating Income}}</td>
								<td>{{company.Gross Margin}}</td>
								<td>{{company.Interest Expense}}</td>
								<td>{{company.Earnings Before Tax}}</td>
								<td>{{company.Income Tax Expense}}</td>
								<td>{{company.Net Income}}</td>
								<td>{{company.Profit Margin}}</td>
								<td>{{company.EBITDA}}</td>
								<td>{{company.EBITDA Margin}}</td>
							</tr>
							{{/each}}
						</tbody>

						// TEST
						<thead>
							{{#each sumIS}}
							<th>{{sumIS.date}}</th>
							{{/each}}
						</thead>
						<tbody>
							{{#each sumIS}}
							<tr>
								<td>{{sumIS.symbol}}</td>
								<td>{{sumIS.revenue}}</td>
								<td>{{sumIS.revenueGrowth}}</td>
								<td>{{sumIS.COGS}}</td>
								<td>{{sumIS.GP}}</td>
								<td>{{sumIS.Operating Expenses}}</td>
								<td>{{sumIS.Operating Income}}</td>
								<td>{{sumIS.Gross Margin}}</td>
								<td>{{sumIS.Interest Expense}}</td>
								<td>{{sumIS.Earnings Before Tax}}</td>
								<td>{{sumIS.Income Tax Expense}}</td>
								<td>{{sumIS.Net Income}}</td>
								<td>{{sumIS.Profit Margin}}</td>
								<td>{{sumIS.EBITDA}}</td>
								<td>{{sumIS.EBITDA Margin}}</td>
							</tr>
							{{/each}}
						</tbody>
						// end TEST

					</div>
				</div>
			</div>

			<br>
			<hr>
			<br>

			<div class="row">
				<div class="card col-4" id="news">
					<div class="card-title">
						Latest News
					</div>
					<br>
					<hr>
					<br>
					<div class="card-body">
						// TBD once we have determined an API and fields for output
						// Date
						// Headline
						// Publisher
						// Executive Summary
						// Tags
					</div>
				</div>

				<div class="card col-8" id="fin-stats">
					<div class="card-title">
						Summary Financial Statements
					</div>
					<br>
					<hr>
					<br>
					<div class="card-body">
						<br>
						<hr>
						<br>
						Summary Income Statement
						<br>
						<hr>
						<thead>
							{{#each company}}
							<th>{{company.date}}</th>
							{{/each}}
						</thead>
						<tbody>
							{{#each company}}
							<tr>
								<td>{{company.Revenue}}</td>
								<td>{{company.Revenue Growth}}</td>
								<td>{{company.Cost of Revenue}}</td>
								<td>{{company.Gross Profit}}</td>
								<td>{{company.Operating Expenses}}</td>
								<td>{{company.Operating Income}}</td>
								<td>{{company.Gross Margin}}</td>
								<td>{{company.Interest Expense}}</td>
								<td>{{company.Earnings Before Tax}}</td>
								<td>{{company.Income Tax Expense}}</td>
								<td>{{company.Net Income}}</td>
								<td>{{company.Profit Margin}}</td>
								<td>{{company.EBITDA}}</td>
								<td>{{company.EBITDA Margin}}</td>
							</tr>
							{{/each}}
						</tbody>
					</div>
				</div>
			</div>

			<br>
			<br>

			<footer class="text-center">
				<hr>
				<br>
				Copyright
				<br>
				<br>
			</footer>

		</div>
	</div>

	<script>
		function buildQueryURL() {
			// queryURL is the url we'll use to query the API
			var queryURL = "https://api.nytimes.com/svc/search/v2/articlesearch.json?";

			// Begin building an object to contain our API call's query parameters
			// Set the API key
			var queryParams = { "api-key": "R1a31F4tBjCUaM2ho8GtIFsrSdtXt30M" };

			// Grab text the user typed into the search input, add to the queryParams object
			queryParams.q = $("#search-term")
				.val()
				.trim();

			// If the user provides a startYear, include it in the queryParams object
			var startYear = $("#start-year")
				.val()
				.trim();

			if (parseInt(startYear)) {
				queryParams.begin_date = startYear + "0101";
			}

			// If the user provides an endYear, include it in the queryParams object
			var endYear = $("#end-year")
				.val()
				.trim();

			if (parseInt(endYear)) {
				queryParams.end_date = endYear + "0101";
			}

			// Logging the URL so we have access to it for troubleshooting
			console.log("---------------\nURL: " + queryURL + "\n---------------");
			console.log(queryURL + $.param(queryParams));
			return queryURL + $.param(queryParams);
		}

		/**
		 * takes API data (JSON/object) and turns it into elements on the page
		 * @param {object} NYTData - object containing NYT API data
		 */
		function updatePage(NYTData) {
			// Get from the form the number of results to display
			// API doesn't have a "limit" parameter, so we have to do this ourselves
			var numArticles = $("#article-count").val();

			// Log the NYTData to console, where it will show up as an object
			console.log(NYTData);
			console.log("------------------------------------");

			// Loop through and build elements for the defined number of articles
			for (var i = 0; i < numArticles; i++) {
				// Get specific article info for current index
				var article = NYTData.response.docs[i];

				// Increase the articleCount (track article # - starting at 1)
				var articleCount = i + 1;

				// Create the  list group to contain the articles and add the article content for each
				var $articleList = $("<ul>");
				$articleList.addClass("list-group");

				// Add the newly created element to the DOM
				$("#article-section").append($articleList);

				// If the article has a headline, log and append to $articleList
				var headline = article.headline;
				var $articleListItem = $("<li class='list-group-item articleHeadline'>");

				if (headline && headline.main) {
					console.log(headline.main);
					$articleListItem.append(
						"<span class='label label-primary'>" +
						articleCount +
						"</span>" +
						"<strong> " +
						headline.main +
						"</strong>"
					);
				}

				// If the article has a byline, log and append to $articleList
				var byline = article.byline;

				if (byline && byline.original) {
					console.log(byline.original);
					$articleListItem.append("<h5>" + byline.original + "</h5>");
				}

				// Log section, and append to document if exists
				var section = article.section_name;
				console.log(article.section_name);
				if (section) {
					$articleListItem.append("<h5>Section: " + section + "</h5>");
				}

				// Log published date, and append to document if exists
				var pubDate = article.pub_date;
				console.log(article.pub_date);
				if (pubDate) {
					$articleListItem.append("<h5>" + article.pub_date + "</h5>");
				}

				// Append and log url
				$articleListItem.append("<a href='" + article.web_url + "'>" + article.web_url + "</a>");
				console.log(article.web_url);

				// Append the article
				$articleList.append($articleListItem);
			}
		}

		// Function to empty out the articles
		function clear() {
			$("#article-section").empty();
		}

		// CLICK HANDLERS
		// ==========================================================

		// .on("click") function associated with the Search Button
		$("#run-search").on("click", function (event) {
			// This line allows us to take advantage of the HTML "submit" property
			// This way we can hit enter on the keyboard and it registers the search
			// (in addition to clicks). Prevents the page from reloading on form submit.
			event.preventDefault();

			// Empty the region associated with the articles
			clear();

			// Build the query URL for the ajax request to the NYT API
			var queryURL = buildQueryURL();

			// Make the AJAX request to the API - GETs the JSON data at the queryURL.
			// The data then gets passed as an argument to the updatePage function
			$.ajax({
				url: queryURL,
				method: "GET"
			}).then(updatePage);
		});

		//  .on("click") function associated with the clear button
		$("#clear-all").on("click", clear);
	</script>