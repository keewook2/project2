<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
	<ul class="navbar-nav">
		<li class="nav-item">
			<a class="nav-link" href="#">App Name</a>
		</li>
		<li class="nav-item">
			<a class="nav-link" href="#">Company</a>
		</li>
		<li class="nav-item">
			<a class="nav-link" href="#">Sign in</a>
		</li>
	</ul>
</nav>
<br>
<div class="wrapper">
	<div class="container">
		<div class="row">
			<div class="card col-4" id="overview">
				<div class="card-title">
					Company Overview
				</div>
				<br>
				<hr>
				<br>
				<div class="card-body">
					<img src="{{company.image}}"><br>
					Ticker: <span id="ticker">{{company.symbol}}</span>
					<br>
					Name: <span id="companyName">{{company.companyName}}</span><br>
					Industry: {{company.industry}}<br>
					Sector: {{company.sector}}<br>
					CEO: {{company.ceo}}<br>
				</div>
			</div>

			<div class="card col-12" id="metrics">
				<div class="card-title">
					Summary Financials
				</div>
				<br>
				<div class="card-body metrics-fin-stats">
					<table class="table">
						<thead class="thead-dark">
							<tr class="statement_year">
								<th class="companyName"></th>
								<th>2015</th>
								<th>2016</th>
								<th>2017</th>
								<th>2018</th>
								<th>2019</th>
							</tr>
						</thead>
						<tbody class="statement_body">
							<tr class="table_revenue">
								<td>Revenue</td>
							</tr>
							<tr class="table_revenueGrowth">
								<td>Revenue Growth</td>
							</tr>
							<tr class="table_COGS">
								{{!-- COGS is same as cost of revenue --}}
								<td>COGS</td>
							</tr>
							<tr class="table_GP">
								<th>Gross Profit</th>
							</tr>
							<tr class="table_opEx">
								<td>Operating Expenses</td>
							</tr>
							<tr class="table_opInc">
								<th>Operating Income</th>
							</tr>
							<tr class="table_grossMargin">
								<td>Gross Margin</td>
							</tr>
							<tr class="table_intEx">
								<td>Interest Expense</td>
							</tr>
							<tr class="table_EBT">
								<th>Earnings before Tax</th>
							</tr>
							<tr class="table_ITE">
								<td>Income Tax Expense</td>
							</tr>
							<tr class="table_NI">
								<th>Net Income</th>
							</tr>
							<tr class="table_PM">
								<td>Profit Margin</td>
							</tr>
							<tr class="table_EBITDA">
								<th>EBITDA</th>
							</tr>
							<tr class="table_EBITDAM">
								<th>EBITDA Margin</th>
							</tr>
						</tbody>
					</table>
				</div>
			</div>
		</div>

		<br>
		<hr>
		<br>

		<div class="row">
			<div class="card col-5" id="news">
				<div class="card-title">
					<span id="test">Latest News</span>
				</div>
				<hr>
				<div class="card-body">
					<h3 class="news_title"></h3>
					<p class="news_source"></p>
					<p class="news_date"></p>
					<p class="news_summary"></p>
				</div>
			</div>

			{{!-- PICK DATA FROM API TO LINK UP AND DECIDE ON LOCATION / STY --}}
			<div class="col-7 chart"></div>
		</div>

		<br>
		<br>

		<footer class="text-center">
			<hr>
			<br>
			Built by Kee, Abbosjon and Chris
			<br>
			<br>
		</footer>

	</div>
</div>

<script src="/js/companies.js"></script>
<script src="https://d3js.org/d3.v3.min.js" charset="utf-8"></script>
<script src="https://d3js.org/d3-format.v1.min.js"></script>
<script type="text/javascript">

	var data = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120,
		135
	];

	var height = 200,
		width = 720,
		barWidth = 40,
		barOffset = 20;

	var yScale = d3.scale.linear()
		.domain([0, d3.max(data)])
		.range([0, height])

	var xScale = d3.scale.ordinal()
		.domain(d3.range(0, data.length))
		.rangeBands([0, width])

	d3.select('.chart').append('svg')
		.attr('width', width)
		.attr('height', height)
		.selectAll('rect').data(data)
		.enter().append('rect')
		.attr('width', xScale.rangeBand())
		.attr('height', function (data) {
			return yScale(data);
		})
		.attr('x', function (data, i) {
			// return xScale(i);
			return i * (barWidth + barOffset);
		})
		.attr('y', function (data) {
			return height - yScale(data);
		});

	// FORMATTING
	var percent = d3.format("~p")(0.123); // 12.3%
	console.log(percent);

	var thousands = d3.format("$,")(4223); // $4,200
	console.log(thousands);
</script>